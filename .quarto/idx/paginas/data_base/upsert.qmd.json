{"title":"Upsert eficiente","markdown":{"yaml":{"title":"Upsert eficiente"},"headingText":"Introdução","containsRefs":false,"markdown":"\n\n\nEstratégia de __upsert__ eficiente para grandes volumes de dados.\n\n### Imports\n\n```{python}\nimport pandas as pd\nimport sqlite3\nfrom great_tables import GT, style, loc\nimport random\nimport math\nimport time\n```\n\nDefine uma função para criar dados de exemplo\n\n```{python}\ndef create_fake_data(n_amostra: int) -> pd.DataFrame:\n    n_amostra = math.ceil(n_amostra/10)*10 \n    df = pd.DataFrame({\n        'chave_primaria': list(range(1, n_amostra + 1)),\n        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] \n    })\n\n    return df\n```\n\nCria as funções para operar o banco de dados\n```{python}\ndef connect_db():\n    conn = sqlite3.connect('dados.db')\n    return conn\n\ndef create_table_bd(table_name) -> None:\n    conn = connect_db()\n    cursor = conn.cursor()\n    statement_pad = \"\"\"\n        CREATE TABLE {} (\n            chave_primaria integer PRIMARY KEY,\n            coluna_2 integer NULL\n        )\n    \"\"\"\n    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')\n    cursor.execute(statement_pad.format(table_name))\n    conn.commit()\n    conn.close()\n        \ndef select_table(table_name: str) -> pd.DataFrame:\n    conn = connect_db()\n    df = pd.read_sql_query(f'select * from {table_name}', conn)\n    conn.close()\n    return df\n\ndef insert_pandas_df(df: pd.DataFrame, table_name: str):\n    create_table_bd(table_name)\n    conn = connect_db()\n    df.to_sql(table_name, conn, if_exists='append', index=False)\n    conn.close()\n```\n\n\nCria um estilo padrão para printar as tabelas\n```{python}\ndef gt(df):\n    gt = (\n        GT(df)\n        .opt_align_table_header(align='center')\n        .cols_align(align='center', columns=None)\n        .tab_options(\n            table_border_top_width=3,\n            table_border_top_color='#000000',\n            table_border_bottom_color='#000000',\n            table_body_border_top_color='#000000')\n    )    \n    return gt\n```\n\n### Definição das funções Upsert\n\nDefine uma função para fazer upsert usando interação do python\n```{python}\ndef upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -> None:\n    \n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    cursor = conn.cursor()\n    for index, row in df.iterrows():\n        valores = \"','\".join(map(str, list(row)))\n        upsert_statement = f\"\"\"\n            INSERT INTO {nome_tabela} ({colunas_str}) \n            VALUES ('{valores}') \n            ON CONFLICT ({where_str}) \n            DO UPDATE SET {update_str};\n        \"\"\"\n        cursor.execute(upsert_statement)\n    conn.commit()\n    conn.close()\n```\n\nDefine uma função para fazer upsert usando uma tabela de saging intermediária\n```{python}\ndef upsert_from_staging(df: pd.DataFrame, \n            nome_tabela_intermediaria: str,\n            nome_tabela: str,\n            where_col: list) -> None:\n    \n\n    # Insere os dados em um dataframe intemediario\n    insert_pandas_df(df, nome_tabela_intermediaria)\n\n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    upsert_statement = f\"\"\"\n    INSERT INTO {nome_tabela} ({colunas_str}) \n    SELECT * FROM {nome_tabela_intermediaria} WHERE true\n    ON CONFLICT ({where_str}) \n    DO UPDATE SET {update_str};\n    \"\"\"\n\n    cursor = conn.cursor()\n    cursor.execute(upsert_statement)\n    cursor.close()\n    conn.commit()\n```\n\n### Teste\nCria novos dados para o exemplo\n```{python}\ndados = create_fake_data(100000) # 100 mil registros para inserir na base de dados\ndados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados\n\n```\n\nExecuta o usert usando interações do Python\n```{python}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando interacao do python\nupsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])\n\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\n``` \n\nExecuta o upsert usando uma tabela intermediaria\n```{python}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria\nupsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n```\n\n\n\n```{python}\ndados_novos\n```\n","srcMarkdownNoYaml":"\n\n## Introdução\n\nEstratégia de __upsert__ eficiente para grandes volumes de dados.\n\n### Imports\n\n```{python}\nimport pandas as pd\nimport sqlite3\nfrom great_tables import GT, style, loc\nimport random\nimport math\nimport time\n```\n\nDefine uma função para criar dados de exemplo\n\n```{python}\ndef create_fake_data(n_amostra: int) -> pd.DataFrame:\n    n_amostra = math.ceil(n_amostra/10)*10 \n    df = pd.DataFrame({\n        'chave_primaria': list(range(1, n_amostra + 1)),\n        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] \n    })\n\n    return df\n```\n\nCria as funções para operar o banco de dados\n```{python}\ndef connect_db():\n    conn = sqlite3.connect('dados.db')\n    return conn\n\ndef create_table_bd(table_name) -> None:\n    conn = connect_db()\n    cursor = conn.cursor()\n    statement_pad = \"\"\"\n        CREATE TABLE {} (\n            chave_primaria integer PRIMARY KEY,\n            coluna_2 integer NULL\n        )\n    \"\"\"\n    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')\n    cursor.execute(statement_pad.format(table_name))\n    conn.commit()\n    conn.close()\n        \ndef select_table(table_name: str) -> pd.DataFrame:\n    conn = connect_db()\n    df = pd.read_sql_query(f'select * from {table_name}', conn)\n    conn.close()\n    return df\n\ndef insert_pandas_df(df: pd.DataFrame, table_name: str):\n    create_table_bd(table_name)\n    conn = connect_db()\n    df.to_sql(table_name, conn, if_exists='append', index=False)\n    conn.close()\n```\n\n\nCria um estilo padrão para printar as tabelas\n```{python}\ndef gt(df):\n    gt = (\n        GT(df)\n        .opt_align_table_header(align='center')\n        .cols_align(align='center', columns=None)\n        .tab_options(\n            table_border_top_width=3,\n            table_border_top_color='#000000',\n            table_border_bottom_color='#000000',\n            table_body_border_top_color='#000000')\n    )    \n    return gt\n```\n\n### Definição das funções Upsert\n\nDefine uma função para fazer upsert usando interação do python\n```{python}\ndef upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -> None:\n    \n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    cursor = conn.cursor()\n    for index, row in df.iterrows():\n        valores = \"','\".join(map(str, list(row)))\n        upsert_statement = f\"\"\"\n            INSERT INTO {nome_tabela} ({colunas_str}) \n            VALUES ('{valores}') \n            ON CONFLICT ({where_str}) \n            DO UPDATE SET {update_str};\n        \"\"\"\n        cursor.execute(upsert_statement)\n    conn.commit()\n    conn.close()\n```\n\nDefine uma função para fazer upsert usando uma tabela de saging intermediária\n```{python}\ndef upsert_from_staging(df: pd.DataFrame, \n            nome_tabela_intermediaria: str,\n            nome_tabela: str,\n            where_col: list) -> None:\n    \n\n    # Insere os dados em um dataframe intemediario\n    insert_pandas_df(df, nome_tabela_intermediaria)\n\n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    upsert_statement = f\"\"\"\n    INSERT INTO {nome_tabela} ({colunas_str}) \n    SELECT * FROM {nome_tabela_intermediaria} WHERE true\n    ON CONFLICT ({where_str}) \n    DO UPDATE SET {update_str};\n    \"\"\"\n\n    cursor = conn.cursor()\n    cursor.execute(upsert_statement)\n    cursor.close()\n    conn.commit()\n```\n\n### Teste\nCria novos dados para o exemplo\n```{python}\ndados = create_fake_data(100000) # 100 mil registros para inserir na base de dados\ndados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados\n\n```\n\nExecuta o usert usando interações do Python\n```{python}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando interacao do python\nupsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])\n\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\n``` \n\nExecuta o upsert usando uma tabela intermediaria\n```{python}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria\nupsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n```\n\n\n\n```{python}\ndados_novos\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"upsert.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.50","theme":"cosmo","title":"Upsert eficiente"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}