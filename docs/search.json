[
  {
    "objectID": "paginas/sql/postgres/listar_colunas.html",
    "href": "paginas/sql/postgres/listar_colunas.html",
    "title": "Listar colunas",
    "section": "",
    "text": "Para apresentar uma descrição de uma tabela usando uma consulta no informationm_schema basta usar o código:\nSELECT\n    column_name,\n    data_type,\n    table_catalog,\n    table_name,\n    ordinal_position,\n    is_nullable,\n    table_schema\nFROM\n    information_schema.columns\nWHERE table_name = 'nome_tabela';\nCaso precise somente dos nomes das colunas. Lembrando que se tem mais de uma tabla com o mesmo nome no banco todos os campos de todas as tabelas serão listados, neste caso pode usar mais um filtro: table_schema = 'table_schema'\nSELECT column_name FROM information_schema.columns WHERE table_name = 'nome_tabela';",
    "crumbs": [
      "Home",
      "SQL",
      "Postgres",
      "Listar colunas"
    ]
  },
  {
    "objectID": "paginas/sql/postgres/listar_colunas.html#como-listar-colunas-de-uma-tabela",
    "href": "paginas/sql/postgres/listar_colunas.html#como-listar-colunas-de-uma-tabela",
    "title": "Listar colunas",
    "section": "",
    "text": "Para apresentar uma descrição de uma tabela usando uma consulta no informationm_schema basta usar o código:\nSELECT\n    column_name,\n    data_type,\n    table_catalog,\n    table_name,\n    ordinal_position,\n    is_nullable,\n    table_schema\nFROM\n    information_schema.columns\nWHERE table_name = 'nome_tabela';\nCaso precise somente dos nomes das colunas. Lembrando que se tem mais de uma tabla com o mesmo nome no banco todos os campos de todas as tabelas serão listados, neste caso pode usar mais um filtro: table_schema = 'table_schema'\nSELECT column_name FROM information_schema.columns WHERE table_name = 'nome_tabela';",
    "crumbs": [
      "Home",
      "SQL",
      "Postgres",
      "Listar colunas"
    ]
  },
  {
    "objectID": "paginas/python/upsert_eficiente/upsert.html",
    "href": "paginas/python/upsert_eficiente/upsert.html",
    "title": "Upsert eficiente",
    "section": "",
    "text": "Estratégia de upsert eficiente para grandes volumes de dados.\n\n\n\nimport pandas as pd\nimport sqlite3\nfrom great_tables import GT, style, loc\nimport random\nimport math\nimport time\n\nDefine uma função para criar dados de exemplo\n\ndef create_fake_data(n_amostra: int) -&gt; pd.DataFrame:\n    n_amostra = math.ceil(n_amostra/10)*10 \n    df = pd.DataFrame({\n        'chave_primaria': list(range(1, n_amostra + 1)),\n        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] \n    })\n\n    return df\n\nCria as funções para operar o banco de dados\n\ndef connect_db():\n    conn = sqlite3.connect('dados.db')\n    return conn\n\ndef create_table_bd(table_name) -&gt; None:\n    conn = connect_db()\n    cursor = conn.cursor()\n    statement_pad = \"\"\"\n        CREATE TABLE {} (\n            chave_primaria integer PRIMARY KEY,\n            coluna_2 integer NULL\n        )\n    \"\"\"\n    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')\n    cursor.execute(statement_pad.format(table_name))\n    conn.commit()\n    conn.close()\n        \ndef select_table(table_name: str) -&gt; pd.DataFrame:\n    conn = connect_db()\n    df = pd.read_sql_query(f'select * from {table_name}', conn)\n    conn.close()\n    return df\n\ndef insert_pandas_df(df: pd.DataFrame, table_name: str):\n    create_table_bd(table_name)\n    conn = connect_db()\n    df.to_sql(table_name, conn, if_exists='append', index=False)\n    conn.close()\n\nCria um estilo padrão para printar as tabelas\n\ndef gt(df):\n    gt = (\n        GT(df)\n        .opt_align_table_header(align='center')\n        .cols_align(align='center', columns=None)\n        .tab_options(\n            table_border_top_width=3,\n            table_border_top_color='#000000',\n            table_border_bottom_color='#000000',\n            table_body_border_top_color='#000000')\n    )    \n    return gt\n\n\n\n\nDefine uma função para fazer upsert usando interação do python\n\ndef upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -&gt; None:\n    \n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    cursor = conn.cursor()\n    for index, row in df.iterrows():\n        valores = \"','\".join(map(str, list(row)))\n        upsert_statement = f\"\"\"\n            INSERT INTO {nome_tabela} ({colunas_str}) \n            VALUES ('{valores}') \n            ON CONFLICT ({where_str}) \n            DO UPDATE SET {update_str};\n        \"\"\"\n        cursor.execute(upsert_statement)\n    conn.commit()\n    conn.close()\n\nDefine uma função para fazer upsert usando uma tabela de saging intermediária\n\ndef upsert_from_staging(df: pd.DataFrame, \n            nome_tabela_intermediaria: str,\n            nome_tabela: str,\n            where_col: list) -&gt; None:\n    \n\n    # Insere os dados em um dataframe intemediario\n    insert_pandas_df(df, nome_tabela_intermediaria)\n\n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    upsert_statement = f\"\"\"\n    INSERT INTO {nome_tabela} ({colunas_str}) \n    SELECT * FROM {nome_tabela_intermediaria} WHERE true\n    ON CONFLICT ({where_str}) \n    DO UPDATE SET {update_str};\n    \"\"\"\n\n    cursor = conn.cursor()\n    cursor.execute(upsert_statement)\n    cursor.close()\n    conn.commit()\n\n\n\n\nCria novos dados para o exemplo\n\ndados = create_fake_data(100000) # 100 mil registros para inserir na base de dados\ndados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados\n\nExecuta o usert usando interações do Python\n\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando interacao do python\nupsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])\n\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\nTempo de execução: 62.13 segundos\nVolume final de dados: 1000000\n\n\nExecuta o upsert usando uma tabela intermediaria\n\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria\nupsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\nTempo de execução: 1.89 segundos\nVolume final de dados: 1000000",
    "crumbs": [
      "Home",
      "Python",
      "Upsert eficiente"
    ]
  },
  {
    "objectID": "paginas/python/upsert_eficiente/upsert.html#introdução",
    "href": "paginas/python/upsert_eficiente/upsert.html#introdução",
    "title": "Upsert eficiente",
    "section": "",
    "text": "Estratégia de upsert eficiente para grandes volumes de dados.\n\n\n\nimport pandas as pd\nimport sqlite3\nfrom great_tables import GT, style, loc\nimport random\nimport math\nimport time\n\nDefine uma função para criar dados de exemplo\n\ndef create_fake_data(n_amostra: int) -&gt; pd.DataFrame:\n    n_amostra = math.ceil(n_amostra/10)*10 \n    df = pd.DataFrame({\n        'chave_primaria': list(range(1, n_amostra + 1)),\n        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] \n    })\n\n    return df\n\nCria as funções para operar o banco de dados\n\ndef connect_db():\n    conn = sqlite3.connect('dados.db')\n    return conn\n\ndef create_table_bd(table_name) -&gt; None:\n    conn = connect_db()\n    cursor = conn.cursor()\n    statement_pad = \"\"\"\n        CREATE TABLE {} (\n            chave_primaria integer PRIMARY KEY,\n            coluna_2 integer NULL\n        )\n    \"\"\"\n    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')\n    cursor.execute(statement_pad.format(table_name))\n    conn.commit()\n    conn.close()\n        \ndef select_table(table_name: str) -&gt; pd.DataFrame:\n    conn = connect_db()\n    df = pd.read_sql_query(f'select * from {table_name}', conn)\n    conn.close()\n    return df\n\ndef insert_pandas_df(df: pd.DataFrame, table_name: str):\n    create_table_bd(table_name)\n    conn = connect_db()\n    df.to_sql(table_name, conn, if_exists='append', index=False)\n    conn.close()\n\nCria um estilo padrão para printar as tabelas\n\ndef gt(df):\n    gt = (\n        GT(df)\n        .opt_align_table_header(align='center')\n        .cols_align(align='center', columns=None)\n        .tab_options(\n            table_border_top_width=3,\n            table_border_top_color='#000000',\n            table_border_bottom_color='#000000',\n            table_body_border_top_color='#000000')\n    )    \n    return gt\n\n\n\n\nDefine uma função para fazer upsert usando interação do python\n\ndef upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -&gt; None:\n    \n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    cursor = conn.cursor()\n    for index, row in df.iterrows():\n        valores = \"','\".join(map(str, list(row)))\n        upsert_statement = f\"\"\"\n            INSERT INTO {nome_tabela} ({colunas_str}) \n            VALUES ('{valores}') \n            ON CONFLICT ({where_str}) \n            DO UPDATE SET {update_str};\n        \"\"\"\n        cursor.execute(upsert_statement)\n    conn.commit()\n    conn.close()\n\nDefine uma função para fazer upsert usando uma tabela de saging intermediária\n\ndef upsert_from_staging(df: pd.DataFrame, \n            nome_tabela_intermediaria: str,\n            nome_tabela: str,\n            where_col: list) -&gt; None:\n    \n\n    # Insere os dados em um dataframe intemediario\n    insert_pandas_df(df, nome_tabela_intermediaria)\n\n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    upsert_statement = f\"\"\"\n    INSERT INTO {nome_tabela} ({colunas_str}) \n    SELECT * FROM {nome_tabela_intermediaria} WHERE true\n    ON CONFLICT ({where_str}) \n    DO UPDATE SET {update_str};\n    \"\"\"\n\n    cursor = conn.cursor()\n    cursor.execute(upsert_statement)\n    cursor.close()\n    conn.commit()\n\n\n\n\nCria novos dados para o exemplo\n\ndados = create_fake_data(100000) # 100 mil registros para inserir na base de dados\ndados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados\n\nExecuta o usert usando interações do Python\n\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando interacao do python\nupsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])\n\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\nTempo de execução: 62.13 segundos\nVolume final de dados: 1000000\n\n\nExecuta o upsert usando uma tabela intermediaria\n\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria\nupsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n\nTempo de execução: 1.89 segundos\nVolume final de dados: 1000000",
    "crumbs": [
      "Home",
      "Python",
      "Upsert eficiente"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notas",
    "section": "",
    "text": "Criei essa página para armazenar de uma forma organizada e de fácil acesso as minhas notas pessoais. São anotações feitas no dia a dia do meu trabalho como cientista de dados. Estou tentando criar as notas sempre com exemplos reprodutíveis, apesar de nem sempre ser possível.\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n Back to top"
  },
  {
    "objectID": "paginas/ferramentas/geral.html",
    "href": "paginas/ferramentas/geral.html",
    "title": "Ferramentas úteis",
    "section": "",
    "text": "Esta página contém links e comentários sobre ferramentas úteis que gosto de utlizar no dia a dia.",
    "crumbs": [
      "Home",
      "Ferramentas",
      "Ferramentas úteis"
    ]
  },
  {
    "objectID": "paginas/ferramentas/geral.html#colorpicker-desktop",
    "href": "paginas/ferramentas/geral.html#colorpicker-desktop",
    "title": "Ferramentas úteis",
    "section": "Colorpicker desktop",
    "text": "Colorpicker desktop\nColorpicker é um seletor de cor que funciona como um aplicativo. (Precisa ser aberto para usar)\ninstant-eyedropper é um seletor simples e fácil de utilizar.",
    "crumbs": [
      "Home",
      "Ferramentas",
      "Ferramentas úteis"
    ]
  },
  {
    "objectID": "paginas/ferramentas/geral.html#seletor-de-paletas-de-cores",
    "href": "paginas/ferramentas/geral.html#seletor-de-paletas-de-cores",
    "title": "Ferramentas úteis",
    "section": "Seletor de paletas de cores",
    "text": "Seletor de paletas de cores\nColorSpace\nCoolors\nColor-hex",
    "crumbs": [
      "Home",
      "Ferramentas",
      "Ferramentas úteis"
    ]
  },
  {
    "objectID": "paginas/sql/postgres/introducao.html",
    "href": "paginas/sql/postgres/introducao.html",
    "title": "Introdução",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Home",
      "SQL",
      "Postgres",
      "Introdução"
    ]
  }
]