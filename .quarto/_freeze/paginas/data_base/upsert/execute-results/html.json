{
  "hash": "d5c3b47fd2ca78bf4f15739d9e0e8b52",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Upsert eficiente\"\n---\n\n\n\n\n## Introdução\n\nEstratégia de __upsert__ eficiente para grandes volumes de dados.\n\n### Imports\n\n::: {#626cd85e .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport sqlite3\nfrom great_tables import GT, style, loc\nimport random\nimport math\nimport time\n```\n:::\n\n\nDefine uma função para criar dados de exemplo\n\n::: {#adac3ce9 .cell execution_count=2}\n``` {.python .cell-code}\ndef create_fake_data(n_amostra: int) -> pd.DataFrame:\n    n_amostra = math.ceil(n_amostra/10)*10 \n    df = pd.DataFrame({\n        'chave_primaria': list(range(1, n_amostra + 1)),\n        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] \n    })\n\n    return df\n```\n:::\n\n\nCria as funções para operar o banco de dados\n\n::: {#5e89ffef .cell execution_count=3}\n``` {.python .cell-code}\ndef connect_db():\n    conn = sqlite3.connect('dados.db')\n    return conn\n\ndef create_table_bd(table_name) -> None:\n    conn = connect_db()\n    cursor = conn.cursor()\n    statement_pad = \"\"\"\n        CREATE TABLE {} (\n            chave_primaria integer PRIMARY KEY,\n            coluna_2 integer NULL\n        )\n    \"\"\"\n    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')\n    cursor.execute(statement_pad.format(table_name))\n    conn.commit()\n    conn.close()\n        \ndef select_table(table_name: str) -> pd.DataFrame:\n    conn = connect_db()\n    df = pd.read_sql_query(f'select * from {table_name}', conn)\n    conn.close()\n    return df\n\ndef insert_pandas_df(df: pd.DataFrame, table_name: str):\n    create_table_bd(table_name)\n    conn = connect_db()\n    df.to_sql(table_name, conn, if_exists='append', index=False)\n    conn.close()\n```\n:::\n\n\nCria um estilo padrão para printar as tabelas\n\n::: {#42c6ebf7 .cell execution_count=4}\n``` {.python .cell-code}\ndef gt(df):\n    gt = (\n        GT(df)\n        .opt_align_table_header(align='center')\n        .cols_align(align='center', columns=None)\n        .tab_options(\n            table_border_top_width=3,\n            table_border_top_color='#000000',\n            table_border_bottom_color='#000000',\n            table_body_border_top_color='#000000')\n    )    \n    return gt\n```\n:::\n\n\n### Definição das funções Upsert\n\nDefine uma função para fazer upsert usando interação do python\n\n::: {#5c36d893 .cell execution_count=5}\n``` {.python .cell-code}\ndef upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -> None:\n    \n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    cursor = conn.cursor()\n    for index, row in df.iterrows():\n        valores = \"','\".join(map(str, list(row)))\n        upsert_statement = f\"\"\"\n            INSERT INTO {nome_tabela} ({colunas_str}) \n            VALUES ('{valores}') \n            ON CONFLICT ({where_str}) \n            DO UPDATE SET {update_str};\n        \"\"\"\n        cursor.execute(upsert_statement)\n    conn.commit()\n    conn.close()\n```\n:::\n\n\nDefine uma função para fazer upsert usando uma tabela de saging intermediária\n\n::: {#d8f2528d .cell execution_count=6}\n``` {.python .cell-code}\ndef upsert_from_staging(df: pd.DataFrame, \n            nome_tabela_intermediaria: str,\n            nome_tabela: str,\n            where_col: list) -> None:\n    \n\n    # Insere os dados em um dataframe intemediario\n    insert_pandas_df(df, nome_tabela_intermediaria)\n\n    conn = connect_db()\n    colunas_str = ','.join(df.columns)\n    where_str = ','.join(where_col)\n    cols_to_update = list(set(df.columns) - set(where_col))\n    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))\n\n    upsert_statement = f\"\"\"\n    INSERT INTO {nome_tabela} ({colunas_str}) \n    SELECT * FROM {nome_tabela_intermediaria} WHERE true\n    ON CONFLICT ({where_str}) \n    DO UPDATE SET {update_str};\n    \"\"\"\n\n    cursor = conn.cursor()\n    cursor.execute(upsert_statement)\n    cursor.close()\n    conn.commit()\n```\n:::\n\n\n### Teste\nCria novos dados para o exemplo\n\n::: {#4da6ba40 .cell execution_count=7}\n``` {.python .cell-code}\ndados = create_fake_data(100000) # 100 mil registros para inserir na base de dados\ndados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados\n```\n:::\n\n\nExecuta o usert usando interações do Python\n\n::: {#34e24519 .cell execution_count=8}\n``` {.python .cell-code}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando interacao do python\nupsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])\n\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTempo de execução: 52.97 segundos\nVolume final de dados: 1000000\n```\n:::\n:::\n\n\nExecuta o upsert usando uma tabela intermediaria\n\n::: {#0a1192db .cell execution_count=9}\n``` {.python .cell-code}\n# Insere os dados na base deixando a base com 100 mil registros\ninsert_pandas_df(dados, 'dados_st1')\n\nstart_time = time.time()\n\n#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria\nupsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])\ntempo = round(time.time() - start_time, 2)\nprint(f\"Tempo de execução: {tempo} segundos\")\n\ndados_final = select_table('dados_st1')\nprint(f\"Volume final de dados: {dados_final.shape[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTempo de execução: 1.65 segundos\nVolume final de dados: 1000000\n```\n:::\n:::\n\n\n",
    "supporting": [
      "upsert_files"
    ],
    "filters": [],
    "includes": {}
  }
}