---
title: "Upsert eficiente"
---

## Introdução

Estratégia de __upsert__ eficiente para grandes volumes de dados.

### Imports

```{python}
import pandas as pd
import sqlite3
from great_tables import GT, style, loc
import random
import math
import time
```

Define uma função para criar dados de exemplo

```{python}
def create_fake_data(n_amostra: int) -> pd.DataFrame:
    n_amostra = math.ceil(n_amostra/10)*10 
    df = pd.DataFrame({
        'chave_primaria': list(range(1, n_amostra + 1)),
        'coluna_2': [random.randint(1,10) for x in range(n_amostra)] 
    })

    return df
```

Cria as funções para operar o banco de dados
```{python}
def connect_db():
    conn = sqlite3.connect('dados.db')
    return conn

def create_table_bd(table_name) -> None:
    conn = connect_db()
    cursor = conn.cursor()
    statement_pad = """
        CREATE TABLE {} (
            chave_primaria integer PRIMARY KEY,
            coluna_2 integer NULL
        )
    """
    cursor.execute(f'DROP TABLE IF EXISTS {table_name};')
    cursor.execute(statement_pad.format(table_name))
    conn.commit()
    conn.close()
        
def select_table(table_name: str) -> pd.DataFrame:
    conn = connect_db()
    df = pd.read_sql_query(f'select * from {table_name}', conn)
    conn.close()
    return df

def insert_pandas_df(df: pd.DataFrame, table_name: str):
    create_table_bd(table_name)
    conn = connect_db()
    df.to_sql(table_name, conn, if_exists='append', index=False)
    conn.close()
```


Cria um estilo padrão para printar as tabelas
```{python}
def gt(df):
    gt = (
        GT(df)
        .opt_align_table_header(align='center')
        .cols_align(align='center', columns=None)
        .tab_options(
            table_border_top_width=3,
            table_border_top_color='#000000',
            table_border_bottom_color='#000000',
            table_body_border_top_color='#000000')
    )    
    return gt
```

### Definição das funções Upsert

Define uma função para fazer upsert usando interação do python
```{python}
def upsert_from_python(df: pd.DataFrame, nome_tabela: str, where_col: list) -> None:
    
    conn = connect_db()
    colunas_str = ','.join(df.columns)
    where_str = ','.join(where_col)
    cols_to_update = list(set(df.columns) - set(where_col))
    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))

    cursor = conn.cursor()
    for index, row in df.iterrows():
        valores = "','".join(map(str, list(row)))
        upsert_statement = f"""
            INSERT INTO {nome_tabela} ({colunas_str}) 
            VALUES ('{valores}') 
            ON CONFLICT ({where_str}) 
            DO UPDATE SET {update_str};
        """
        cursor.execute(upsert_statement)
    conn.commit()
    conn.close()
```

Define uma função para fazer upsert usando uma tabela de saging intermediária
```{python}
def upsert_from_staging(df: pd.DataFrame, 
            nome_tabela_intermediaria: str,
            nome_tabela: str,
            where_col: list) -> None:
    

    # Insere os dados em um dataframe intemediario
    insert_pandas_df(df, nome_tabela_intermediaria)

    conn = connect_db()
    colunas_str = ','.join(df.columns)
    where_str = ','.join(where_col)
    cols_to_update = list(set(df.columns) - set(where_col))
    update_str = ', '.join(pd.Series(cols_to_update) +  ' = excluded.' +  pd.Series(cols_to_update))

    upsert_statement = f"""
    INSERT INTO {nome_tabela} ({colunas_str}) 
    SELECT * FROM {nome_tabela_intermediaria} WHERE true
    ON CONFLICT ({where_str}) 
    DO UPDATE SET {update_str};
    """

    cursor = conn.cursor()
    cursor.execute(upsert_statement)
    cursor.close()
    conn.commit()
```

### Teste
Cria novos dados para o exemplo
```{python}
dados = create_fake_data(100000) # 100 mil registros para inserir na base de dados
dados_novos=create_fake_data(1000000) # 1 milhao de registros para fazer upsert na base de dados

```

Executa o usert usando interações do Python
```{python}
# Insere os dados na base deixando a base com 100 mil registros
insert_pandas_df(dados, 'dados_st1')

start_time = time.time()

#  Faz upsert de 1 milhao de registro usando interacao do python
upsert_from_python(dados_novos, 'dados_st1', ['chave_primaria'])

tempo = round(time.time() - start_time, 2)
print(f"Tempo de execução: {tempo} segundos")

dados_final = select_table('dados_st1')
print(f"Volume final de dados: {dados_final.shape[0]}")

``` 

Executa o upsert usando uma tabela intermediaria
```{python}
# Insere os dados na base deixando a base com 100 mil registros
insert_pandas_df(dados, 'dados_st1')

start_time = time.time()

#  Faz upsert de 1 milhao de registro usando uma tabela intermediaria
upsert_from_staging(dados_novos, 'dados', 'dados_st1', ['chave_primaria'])
tempo = round(time.time() - start_time, 2)
print(f"Tempo de execução: {tempo} segundos")

dados_final = select_table('dados_st1')
print(f"Volume final de dados: {dados_final.shape[0]}")
```
